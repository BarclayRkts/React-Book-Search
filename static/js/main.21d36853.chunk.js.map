{"version":3,"sources":["Display.js","App.js","serviceWorker.js","index.js"],"names":["Display","bookItems","this","props","books","map","book","id","title","volumeInfo","thumbnail","imageLinks","categories","authors","publisher","description","pageCount","publishedDate","averageRating","Card","key","Container","src","alt","ListGroup","ListGroupItem","className","Component","App","state","text","items","toggle","handleChange","bind","handleSubmit","axios","request","method","url","then","response","setState","data","catch","error","console","log","evt","preventDefault","getBook","target","value","onSubmit","onChange","name","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2WAQqBA,G,6KAEb,IAAIC,EA4CJ,OA3CIC,KAAKC,MAAMC,QACfH,EAAYC,KAAKC,MAAMC,MAAMC,KAAI,SAAAC,GAC7B,IAAIC,EAAKD,EAAKC,GACVC,EAAQF,EAAKG,WAAWD,MACxBE,EAAYJ,EAAKG,WAAWE,WAAWD,UACvCE,EAAaN,EAAKG,WAAWG,WAC7BC,EAAUP,EAAKG,WAAWI,QAC1BC,EAAYR,EAAKG,WAAWK,UAC5BC,EAAcT,EAAKG,WAAWM,YAC9BC,EAAYV,EAAKG,WAAWO,UAC5BC,EAAgBX,EAAKG,WAAWQ,cAChCC,EAAgBZ,EAAKG,WAAWS,cACpC,OACI,kBAACC,EAAA,EAAD,CAAMC,IAAKb,GACP,kBAACc,EAAA,EAAD,KACA,4BAAKb,GACL,6BACI,6BACI,yBAAKc,IAAKZ,EAAWa,IAAI,kBAE7B,6BACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAAe,gDAA8Bb,GAC7C,kBAACa,EAAA,EAAD,KAAe,6CAA2BZ,GAC1C,kBAACY,EAAA,EAAD,KAAe,+CAA6BX,GAC5C,kBAACW,EAAA,EAAD,KAAe,kDAAgCR,GAC/C,kBAACQ,EAAA,EAAD,KAAe,gDAA8BT,GAC7C,kBAACS,EAAA,EAAD,KAAe,oDAAiC,0BAAMC,UAAU,UAAUR,OAIlF,6BACI,6BACA,gDACI,yBAAKQ,UAAU,QAAQX,GAC3B,qCASZ,yBAAKW,UAAU,gBACX,6BACCzB,Q,GAjDoB0B,cCHhBC,E,kDACjB,WAAYzB,GAAO,IAAD,8BAChB,cAAMA,IACD0B,MAAQ,CACTC,KAAM,GACNC,MAAO,GACPC,QAAQ,GAEZ,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBARJ,E,sDAUV,IAAD,OACLE,IAAMC,QAAQ,CACVC,OAAQ,MACRC,IAAI,iDAAD,OAAmDrC,KAAK2B,MAAMC,KAA9D,kDAEJU,MAAK,SAACC,GAGL,EAAKC,SAAS,CACVX,MAAOU,EAASE,KAAKZ,MACrBC,QAAQ,OAGbY,OAAM,SAACC,GACNC,QAAQC,IAAIF,Q,mCAGPG,GACTA,EAAIC,iBACJ/C,KAAKgD,Y,4EAEUF,G,wEACfA,EAAIC,iB,SACE/C,KAAKwC,SAAS,CAChBZ,KAAMkB,EAAIG,OAAOC,Q,sIAKvB,OACE,yBAAK1B,UAAW,WACd,2CACA,0BAAMA,UAAU,WAAW2B,SAAUnD,KAAKiC,cACxC,2BACAiB,MAAOlD,KAAK2B,MAAMC,KAClBwB,SAAUpD,KAAK+B,aACfsB,KAAK,OACLC,KAAK,SAEL,2CAEA,kBAAC,EAAD,CAASpD,MAAOF,KAAK2B,MAAME,a,GApDJJ,aCOb8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEd3B,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM2B,c","file":"static/js/main.21d36853.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport { Card } from 'react-bootstrap';\r\nimport { ListGroup } from 'react-bootstrap';\r\nimport { ListGroupItem } from 'react-bootstrap';\r\nimport './Display.css';\r\n\r\n\r\nexport default class Display extends Component {\r\n    render() {\r\n        let bookItems;\r\n        if (this.props.books) {\r\n        bookItems = this.props.books.map(book => {\r\n            let id = book.id;\r\n            let title = book.volumeInfo.title;\r\n            let thumbnail = book.volumeInfo.imageLinks.thumbnail;\r\n            let categories = book.volumeInfo.categories;\r\n            let authors = book.volumeInfo.authors;\r\n            let publisher = book.volumeInfo.publisher;\r\n            let description = book.volumeInfo.description;\r\n            let pageCount = book.volumeInfo.pageCount;\r\n            let publishedDate = book.volumeInfo.publishedDate;\r\n            let averageRating = book.volumeInfo.averageRating;\r\n            return (\r\n                <Card key={id}>\r\n                    <Container>\r\n                    <h3>{title}</h3>\r\n                    <div>\r\n                        <div> \r\n                            <img src={thumbnail} alt=\"presentation\" />\r\n                        </div>\r\n                        <div>\r\n                        <ListGroup>\r\n                            <ListGroupItem><strong>Categories: </strong>{categories}</ListGroupItem>\r\n                            <ListGroupItem><strong>Authors: </strong>{authors}</ListGroupItem>\r\n                            <ListGroupItem><strong>Publisher: </strong>{publisher}</ListGroupItem>\r\n                            <ListGroupItem><strong>Publish Date: </strong>{publishedDate}</ListGroupItem>\r\n                            <ListGroupItem><strong>Page Count: </strong>{pageCount}</ListGroupItem>\r\n                            <ListGroupItem><strong>Average Rating: </strong><span className=\"rating\">{averageRating}</span></ListGroupItem>\r\n                        </ListGroup>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div>\r\n                        <h3>Book Description</h3>\r\n                            <div className='desc'>{description}</div>\r\n                        <hr />\r\n                        </div>\r\n                    </div>\r\n                    </Container>\r\n                </Card>\r\n                );\r\n            });\r\n            }\r\n        return (\r\n            <div className='containerDiv'>\r\n                <div>\r\n                {bookItems}\r\n                </div>\r\n            </div>\r\n            );\r\n    }\r\n}\r\n","import React, { Component } from 'react'\nimport './App.css';\nimport axios from 'axios';\nimport Display from './Display';\n\nexport default class App extends Component {\n    constructor(props){\n      super(props);\n      this.state = {\n          text: '',\n          items: [],\n          toggle: false\n      }\n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  getBook(){\n      axios.request({\n          method: 'get',\n          url: `https://www.googleapis.com/books/v1/volumes?q=${this.state.text}&key=AIzaSyC1eqYmoHCSHBy40V6bFTGoj9DL0S7A1cE`\n          //https://www.googleapis.com/books/v1/volumes?q=intitle:${this.state.text}&key=AIzaSyC1eqYmoHCSHBy40V6bFTGoj9DL0S7A1cE`\n      }).then((response) => {\n          // console.log(response.data);\n          // console.log(response.data.items)\n          this.setState({\n              items: response.data.items,\n              toggle: true\n          })\n          // console.log(response.data.items[1].selfLink)\n      }).catch((error) => {\n          console.log(error);\n      });\n  }\n  handleSubmit(evt){\n      evt.preventDefault();\n      this.getBook();\n  }\n  async handleChange(evt){\n      evt.preventDefault();\n      await this.setState({\n          text: evt.target.value\n      })\n      // console.log(this.state.text);\n  }\n  render() {\n    return (\n      <div className ='Display'>\n        <h1>Book Finder</h1>\n        <form className='inputBox' onSubmit={this.handleSubmit}>\n          <input\n          value={this.state.text}\n          onChange={this.handleChange}\n          name='text'\n          type='text'\n          />\n          <button>Search</button>\n        </form>\n          <Display books={this.state.items}/>\n      </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}